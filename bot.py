
import asyncio
import logging
import sqlite3
from datetime import datetime, timedelta
import re
import random

from aiogram import Dispatcher, F, Bot
from aiogram.client.default import DefaultBotProperties
from aiogram.enums import ParseMode, ContentType
from aiogram.filters import Command, CommandStart
from aiogram.types import Message, CallbackQuery, InlineKeyboardButton, InlineKeyboardMarkup
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup


from apscheduler.schedulers.asyncio import AsyncIOScheduler
from apscheduler.triggers.cron import CronTrigger
import pytz

file_handler = logging.FileHandler("bot.log", encoding="utf-8")
file_handler.setLevel(logging.INFO)

stream_handler = logging.StreamHandler()
stream_handler.setLevel(logging.INFO)

formatter = logging.Formatter(
    fmt="%(asctime)s [%(levelname)s] %(name)s: %(message)s",
    datefmt="%Y-%m-%d %H:%M:%S",
)

file_handler.setFormatter(formatter)
stream_handler.setFormatter(formatter)

logging.basicConfig(
    level=logging.INFO,
    handlers=[file_handler, stream_handler],
    format="%(asctime)s [%(levelname)s] %(name)s: %(message)s",
    datefmt="%Y-%m-%d %H:%M:%S",
)

logger = logging.getLogger(__name__)
logger.info("–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–ø—É—â–µ–Ω–æ. –í—Å–µ —Å–æ–±—ã—Ç–∏—è –ø–∏—à–µ–º –≤ bot.log")

API_TOKEN = "YOUR_API_TOKEN"  # TODO: –í—Å—Ç–∞–≤—å—Ç–µ —Å–≤–æ–π —Ç–æ–∫–µ–Ω
OWNER_ID = 000000000  # TODO: –í—Å—Ç–∞–≤—å—Ç–µ —Å–≤–æ–π ID –≤–ª–∞–¥–µ–ª—å—Ü–∞

MANAGER_IDS = {
    1: 1111111111,  # TODO: –í—Å—Ç–∞–≤—å—Ç–µ ID –º–µ–Ω–µ–¥–∂–µ—Ä–∞ 1
    2: 2222222222,  # TODO: –í—Å—Ç–∞–≤—å—Ç–µ ID –º–µ–Ω–µ–¥–∂–µ—Ä–∞ 2
    3: 3333333333,  # TODO: –í—Å—Ç–∞–≤—å—Ç–µ ID –º–µ–Ω–µ–¥–∂–µ—Ä–∞ 3
}

MANAGER_NAMES = {
    1: "Manager1",  # TODO: –ò–º—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞ 1
    2: "Manager2",  # TODO: –ò–º—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞ 2
    3: "Manager3"   # TODO: –ò–º—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞ 3
}

KIEV_TZ = pytz.timezone("Europe/Kiev")
bot = Bot(token=API_TOKEN, default=DefaultBotProperties(parse_mode=ParseMode.HTML))
storage = MemoryStorage()
dp = Dispatcher(storage=storage)

class OwnerAssignTask(StatesGroup):
    choosing_manager = State()
    original_message_content_type = State()
    original_message_file_id = State()
    original_message_text = State()
    original_message_caption = State()

DB_PATH = "tasks.db"

def init_db():
    conn = sqlite3.connect(DB_PATH)
    c = conn.cursor()
    c.execute("""
    CREATE TABLE IF NOT EXISTS tasks (
        task_id TEXT PRIMARY KEY,
        chat_id INTEGER,
        type TEXT,
        file_id TEXT,
        text_ TEXT,
        caption TEXT,
        next_reminder_delta INTEGER,
        deadline TEXT,
        status TEXT,
        message_id INTEGER,
        source TEXT,
        manager_num INTEGER
    )
    """)
    conn.commit()
    try:
        c.execute("PRAGMA table_info(tasks)")
        columns = [row[1] for row in c.fetchall()]
        if "manager_num" not in columns:
            logger.info("–°—Ç–æ–ª–±–µ—Ü 'manager_num' –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç. –î–æ–±–∞–≤–ª—è–µ–º...")
            c.execute("ALTER TABLE tasks ADD COLUMN manager_num INTEGER")
            conn.commit()
            logger.info("–°—Ç–æ–ª–±–µ—Ü 'manager_num' —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω.")
        else:
            logger.debug("–°—Ç–æ–ª–±–µ—Ü 'manager_num' —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ —Ç–∞–±–ª–∏—Ü–µ 'tasks'.")
    except sqlite3.Error as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ/–º–æ–¥–∏—Ñ–∏–∫–∞—Ü–∏–∏ —Ç–∞–±–ª–∏—Ü—ã 'tasks': {e}")
    conn.close()
    logger.info("–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö (tasks.db) –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞ (—Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –ø—Ä–æ–≤–µ—Ä–µ–Ω–∞/–æ–±–Ω–æ–≤–ª–µ–Ω–∞).")


def save_task_to_db(task_id: str, data: dict):
    conn = sqlite3.connect(DB_PATH)
    c = conn.cursor()
    deadline_str = data["deadline"].isoformat() if data["deadline"] else None
    c.execute("""
    INSERT OR REPLACE INTO tasks 
    (task_id, chat_id, type, file_id, text_, caption, next_reminder_delta, deadline, status, message_id, source, manager_num)
    VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
    """, (
        task_id, data["chat_id"], data["type"], data["file_id"], data["text"],
        data["caption"], data["next_reminder_delta"], deadline_str, data["status"],
        data["message_id"], data["source"], data.get("manager_num")
    ))
    conn.commit()
    conn.close()
    logger.debug(f"–ó–∞–¥–∞—á–∞ {task_id} —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞/–æ–±–Ω–æ–≤–ª–µ–Ω–∞ –≤ –ë–î.")

def load_tasks_from_db() -> dict:
    conn = sqlite3.connect(DB_PATH)
    c = conn.cursor()
    c.execute("SELECT task_id, chat_id, type, file_id, text_, caption, next_reminder_delta, deadline, status, message_id, source, manager_num FROM tasks")
    rows = c.fetchall()
    conn.close()
    tasks = {}
    for row_data in rows:
        (task_id, chat_id, type_, file_id, text_, caption,
         next_reminder_delta, deadline_str, status, message_id, source, manager_num) = row_data
        deadline = datetime.fromisoformat(deadline_str) if deadline_str else None
        tasks[task_id] = {
            "chat_id": chat_id, "type": type_, "file_id": file_id, "text": text_,
            "caption": caption, "next_reminder_delta": next_reminder_delta,
            "deadline": deadline, "status": status, "message_id": message_id,
            "source": source, "manager_num": manager_num
        }
    logger.info(f"–ó–∞–≥—Ä—É–∂–µ–Ω–æ –∑–∞–¥–∞—á –∏–∑ –ë–î: {len(tasks)}")
    return tasks

def delete_task_from_db(task_id: str):
    conn = sqlite3.connect(DB_PATH)
    c = conn.cursor()
    c.execute("DELETE FROM tasks WHERE task_id = ?", (task_id,))
    conn.commit()
    conn.close()
    logger.debug(f"–ó–∞–¥–∞—á–∞ {task_id} —É–¥–∞–ª–µ–Ω–∞ –∏–∑ –ë–î.")

scheduler = AsyncIOScheduler(timezone=KIEV_TZ)
tasks_dict = {}

def generate_task_id() -> str:
    return f"task_{datetime.now(KIEV_TZ).timestamp()}_{random.randint(1000,9999)}"

def make_done_keyboard(task_id: str) -> InlineKeyboardMarkup:
    button = InlineKeyboardButton(text="–í—ã–ø–æ–ª–Ω–µ–Ω–æ", callback_data=f"done:{task_id}")
    return InlineKeyboardMarkup(inline_keyboard=[[button]])

async def schedule_reminder(task_id: str, reminder_minutes: int = None):
    task = tasks_dict.get(task_id)
    if not task or task["status"] != "active":
        logger.debug(f"–ó–∞–¥–∞—á–∞ {task_id} –Ω–µ –∞–∫—Ç–∏–≤–Ω–∞ –∏–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞, –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –Ω–µ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–æ.")
        return

    if reminder_minutes is None:
        reminder_minutes = task["next_reminder_delta"]
    
    if reminder_minutes == 0 and task["source"] not in ["manager_rem", "owner"]:
         reminder_minutes = task["next_reminder_delta"]

    when = datetime.now(tz=KIEV_TZ) + timedelta(minutes=reminder_minutes)
    tasks_dict[task_id]["deadline"] = when
    save_task_to_db(task_id, tasks_dict[task_id])
    logger.info(f"–°–ª–µ–¥—É—é—â–µ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –¥–ª—è –∑–∞–¥–∞—á–∏ {task_id} –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–æ –Ω–∞ {when.strftime('%Y-%m-%d %H:%M:%S %Z')}")

async def check_tasks():
    now = datetime.now(tz=KIEV_TZ)
    for task_id, data in list(tasks_dict.items()):
        if data["status"] == "active" and data["deadline"] and data["deadline"] <= now:
            logger.info(f"–ó–∞–¥–∞—á–∞ {task_id} –¥–ª—è —á–∞—Ç–∞ {data['chat_id']} –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–∞. –î–µ–¥–ª–∞–π–Ω: {data['deadline'].strftime('%Y-%m-%d %H:%M:%S %Z')}")
            try:
                if data.get("message_id"):
                    await bot.delete_message(data["chat_id"], data["message_id"])
                    logger.debug(f"–°—Ç–∞—Ä–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ {data['message_id']} –¥–ª—è –∑–∞–¥–∞—á–∏ {task_id} —É–¥–∞–ª–µ–Ω–æ.")
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è {data.get('message_id')} –¥–ª—è –∑–∞–¥–∞—á–∏ {task_id}: {e}")

            try:
                msg = await send_task_message(task_id, reminder=True)
                if msg:
                    data["message_id"] = msg.message_id
                    save_task_to_db(task_id, data)
                else:
                    logger.warning(f"send_task_message –¥–ª—è {task_id} –Ω–µ –≤–µ—Ä–Ω—É–ª–æ —Å–æ–æ–±—â–µ–Ω–∏–µ.")
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –¥–ª—è –∑–∞–¥–∞—á–∏ {task_id}: {e}")
                continue 
            
            current_task_data = tasks_dict.get(task_id)
            if current_task_data and current_task_data["status"] == "active":
                 await schedule_reminder(task_id)
            else:
                logger.info(f"–ó–∞–¥–∞—á–∞ {task_id} –±–æ–ª—å—à–µ –Ω–µ –∞–∫—Ç–∏–≤–Ω–∞ –ø–æ—Å–ª–µ –ø–æ–ø—ã—Ç–∫–∏ –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è, —Å–ª–µ–¥—É—é—â–µ–µ –Ω–µ –ø–ª–∞–Ω–∏—Ä—É–µ–º.")

async def send_task_message(task_id: str, reminder=False):
    task = tasks_dict.get(task_id)
    if not task:
        logger.warning(f"–ó–∞–¥–∞—á–∞ {task_id} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ tasks_dict –ø—Ä–∏ –ø–æ–ø—ã—Ç–∫–µ –æ—Ç–ø—Ä–∞–≤–∫–∏.")
        return None
    if task["status"] != "active":
        logger.debug(f"–ó–∞–¥–∞—á–∞ {task_id} –Ω–µ –∞–∫—Ç–∏–≤–Ω–∞ ({task['status']}), –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º.")
        return None

    chat_id = task["chat_id"]
    msg_type = task["type"]
    file_id = task["file_id"]
    kb = make_done_keyboard(task_id)
    
    prefix_text = "‚ÄºÔ∏è –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ ‚ÄºÔ∏è\n" if reminder else ""

    if task["source"] == "owner" and task.get("manager_num"):
        manager_num = task.get("manager_num")
        manager_name = MANAGER_NAMES.get(manager_num, f"–ú–µ–Ω–µ–¥–∂–µ—Ä {manager_num}")
        prefix_text = f"üîî –ù–æ–≤–∞—è –ó–∞–¥–∞—á–∞ –¥–ª—è {manager_name} üîî\n{prefix_text}"
    elif task["source"] != "owner" and not reminder :
         prefix_text = "üîî –ù–æ–≤–∞—è –∑–∞–¥–∞—á–∞ üîî\n"
    
    text_to_send = prefix_text

    try:
        if msg_type == "text":
            text_to_send += task["text"]
            msg = await bot.send_message(chat_id, text_to_send, reply_markup=kb)
        else:
            caption_to_send = text_to_send + (task["caption"] or "")
            if msg_type == "photo":
                msg = await bot.send_photo(chat_id=chat_id, photo=file_id, caption=caption_to_send, reply_markup=kb)
            elif msg_type == "document":
                msg = await bot.send_document(chat_id=chat_id, document=file_id, caption=caption_to_send, reply_markup=kb)
            elif msg_type == "video":
                msg = await bot.send_video(chat_id=chat_id, video=file_id, caption=caption_to_send, reply_markup=kb)
            else:
                text_to_send += f"\n[–¢–∏–ø {msg_type} –Ω–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è –ø–æ–¥—Ä–æ–±–Ω–æ]\n" + (task["text"] or "")
                msg = await bot.send_message(chat_id=chat_id, text=text_to_send, reply_markup=kb)
        
        logger.info(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ {'–Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ' if reminder else '—Å–æ–æ–±—â–µ–Ω–∏–µ'} –¥–ª—è –∑–∞–¥–∞—á–∏ {task_id} –≤ —á–∞—Ç {chat_id}. –¢–∏–ø: {msg_type}.")
        return msg
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –∑–∞–¥–∞—á–∏ {task_id} –≤ —á–∞—Ç {chat_id}: {e}")
        if "bot was blocked by the user" in str(e) or "user is deactivated" in str(e) or "chat not found" in str(e):
            logger.warning(f"–ú–µ–Ω–µ–¥–∂–µ—Ä {chat_id} –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª –±–æ—Ç–∞ –∏–ª–∏ —á–∞—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω. –î–µ–∞–∫—Ç–∏–≤–∏—Ä—É—é –∑–∞–¥–∞—á—É {task_id}.")
            if task_id in tasks_dict:
                tasks_dict[task_id]["status"] = "error_user_blocked"
                save_task_to_db(task_id, tasks_dict[task_id])
        return None

def extract_message_data(message: Message):
    prefix = ""
    if message.content_type == ContentType.TEXT:
        return {"type": "text", "file_id": None, "text": prefix + message.text, "caption": None}
    elif message.content_type == ContentType.PHOTO:
        return {"type": "photo", "file_id": message.photo[-1].file_id, "text": None, "caption": prefix + (message.caption or "")}
    elif message.content_type == ContentType.DOCUMENT:
        return {"type": "document", "file_id": message.document.file_id, "text": None, "caption": prefix + (message.caption or "")}
    elif message.content_type == ContentType.VIDEO:
        return {"type": "video", "file_id": message.video.file_id, "text": None, "caption": prefix + (message.caption or "")}
    else:
        return {"type": "text", "file_id": None, "text": prefix + f"–ü–æ–ª—É—á–µ–Ω –∫–æ–Ω—Ç–µ–Ω—Ç —Ç–∏–ø–∞ {message.content_type} (–Ω–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è)", "caption": None}

@dp.message(CommandStart())
async def cmd_start(message: Message):
    manager_list_str_parts = []
    for num in sorted(MANAGER_IDS.keys()): 
        name = MANAGER_NAMES.get(num, f"–ú–µ–Ω–µ–¥–∂–µ—Ä {num}")
        manager_list_str_parts.append(f"  - {name}") 
    manager_list_for_start = "\n".join(manager_list_str_parts)
    if not manager_list_for_start:
        manager_list_for_start = "  (–ú–µ–Ω–µ–¥–∂–µ—Ä—ã –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã)"

    text = (
        "–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç-–Ω–∞–ø–æ–º–∏–Ω–∞–ª–∫–∞.\n"
        f"–î–æ—Å—Ç—É–ø–Ω—ã–µ –º–µ–Ω–µ–¥–∂–µ—Ä—ã:\n{manager_list_for_start}\n\n"
        "–ö–æ–º–∞–Ω–¥—ã:\n"
        "1) –ï—Å–ª–∏ –≤—ã –≤–ª–∞–¥–µ–ª–µ—Ü, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –±–æ—Ç—É —Å–æ–æ–±—â–µ–Ω–∏–µ (—Ç–µ–∫—Å—Ç, —Ñ–æ—Ç–æ, –¥–æ–∫—É–º–µ–Ω—Ç). "
        "–ó–∞—Ç–µ–º –≤—ã–±–µ—Ä–∏—Ç–µ, –∫–∞–∫–æ–º—É –º–µ–Ω–µ–¥–∂–µ—Ä—É –µ–≥–æ –∞–¥—Ä–µ—Å–æ–≤–∞—Ç—å. "
        "–ú–µ–Ω–µ–¥–∂–µ—Ä—É –ø—Ä–∏–¥—ë—Ç –∑–∞–¥–∞—á–∞ —Å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ–º.\n\n"
        "2) –ú–µ–Ω–µ–¥–∂–µ—Ä—ã –º–æ–≥—É—Ç –ø–æ—Å—Ç–∞–≤–∏—Ç—å —Å–µ–±–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ:\n"
        "   <code>/rem [–æ–ø–∏—Å–∞–Ω–∏–µ] [HH:MM]</code> (—Å–µ–≥–æ–¥–Ω—è –∏–ª–∏ –∑–∞–≤—Ç—Ä–∞, –µ—Å–ª–∏ –≤—Ä–µ–º—è –ø—Ä–æ—à–ª–æ)\n"
        "   <code>/rem [–æ–ø–∏—Å–∞–Ω–∏–µ] [DD.MM] [HH:MM]</code> (–∫–æ–Ω–∫—Ä–µ—Ç–Ω–∞—è –¥–∞—Ç–∞ –∏ –≤—Ä–µ–º—è)\n"
        "–í —É–∫–∞–∑–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è –ø—Ä–∏–¥—ë—Ç –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ, –ø–æ—Ç–æ–º –∫–∞–∂–¥—ã–µ 30 –º–∏–Ω—É—Ç, –ø–æ–∫–∞ –Ω–µ –Ω–∞–∂–∞—Ç—å ¬´–í—ã–ø–æ–ª–Ω–µ–Ω–æ¬ª.\n\n"
    )

    manager_1_name = MANAGER_NAMES.get(1, "–ú–µ–Ω–µ–¥–∂–µ—Ä 1")
    if 1 in MANAGER_IDS: # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –±–ª–æ–∫ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –º–µ–Ω–µ–¥–∂–µ—Ä 1 –Ω–∞—Å—Ç—Ä–æ–µ–Ω
        text += (
            f"<b>–î–ª—è {manager_1_name}:</b>\n"
            " - 15 —á–∏—Å–ª–æ –∏ –ø–æ—Å–ª–µ–¥–Ω–∏–π –¥–µ–Ω—å –º–µ—Å—è—Ü–∞\n"
            " - –ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫ 10:00\n"
            " - –°—É–±–±–æ—Ç–∞ 19:00 –∏ 19:30\n\n"
        )

    m2_name = MANAGER_NAMES.get(2)
    m3_name = MANAGER_NAMES.get(3)
    m2_m3_names_list = []
    
    if 2 in MANAGER_IDS and m2_name: m2_m3_names_list.append(m2_name)
    if 3 in MANAGER_IDS and m3_name: m2_m3_names_list.append(m3_name)
    
    if m2_m3_names_list:
        m2_m3_display_name = " –∏ ".join(m2_m3_names_list)
        text += (
            f"<b>–î–ª—è {m2_m3_display_name} (–µ–∂–µ–º–µ—Å—è—á–Ω–æ):</b>\n"
            " - 1 —á–∏—Å–ª–æ: –ó–∞–ø—É—à–∏—Ç—å –∫–ª–∏–µ–Ω—Ç–æ–≤ –Ω–∞ –æ–ø–ª–∞—Ç—ã, –≤—ã—Å—Ç–∞–≤–∏—Ç—å —Å—á–µ—Ç–∞.\n"
            " - 5 —á–∏—Å–ª–æ: –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –æ–ø–ª–∞—Ç—ã, –¥–æ–ø—É—à–∏—Ç—å –Ω–µ–æ–ø–ª–∞—Ç–∏–≤—à–∏—Ö.\n"
            " - 15 —á–∏—Å–ª–æ: –ó–∞–ø—É—à–∏—Ç—å –∫–ª–∏–µ–Ω—Ç–æ–≤ –Ω–∞ –æ–ø–ª–∞—Ç—É 50%.\n"
            " - 20 —á–∏—Å–ª–æ: –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –æ–ø–ª–∞—Ç—ã 50%, –¥–æ–ø—É—à–∏—Ç—å –Ω–µ–æ–ø–ª–∞—Ç–∏–≤—à–∏—Ö.\n"
            " - –ü–æ—Å–ª–µ–¥–Ω–∏–π –¥–µ–Ω—å –º–µ—Å—è—Ü–∞ (28.02 –∏–ª–∏ 30 —á–∏—Å–ª–æ): –ù–∞–ø–æ–º–Ω–∏—Ç—å –¥–∏–∑–∞–π–Ω–µ—Ä–∞–º –æ —Ç–∞–±–ª–∏—Ü–∞—Ö.\n"
        )
    
    text += "–í—Å–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –ø–æ–≤—Ç–æ—Ä—è—é—Ç—Å—è –∫–∞–∂–¥—ã–µ 30 –º–∏–Ω—É—Ç, –ø–æ–∫–∞ –Ω–µ '–í—ã–ø–æ–ª–Ω–µ–Ω–æ'."
    
    await message.answer(text)
    logger.info(f"/start –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.id}")

@dp.message(F.chat.id == OWNER_ID, ~CommandStart())
async def from_owner_handler(message: Message, state: FSMContext):
    extracted_data = extract_message_data(message)
    await state.update_data(
        original_message_content_type=extracted_data["type"],
        original_message_file_id=extracted_data["file_id"],
        original_message_text=extracted_data["text"],
        original_message_caption=extracted_data["caption"]
    )
    
    buttons = []
    for num in sorted(MANAGER_IDS.keys()): 
        name = MANAGER_NAMES.get(num, f"–ú–µ–Ω–µ–¥–∂–µ—Ä {num}") 
        buttons.append(InlineKeyboardButton(text=f"{name}", callback_data=f"assign_to_manager:{num}"))
        
    keyboard_rows = [buttons[i:i + 2] for i in range(0, len(buttons), 2)]
    keyboard = InlineKeyboardMarkup(inline_keyboard=keyboard_rows)
    
    await message.reply("–ö–∞–∫–æ–º—É –º–µ–Ω–µ–¥–∂–µ—Ä—É –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —ç—Ç—É –∑–∞–¥–∞—á—É?", reply_markup=keyboard)
    await state.set_state(OwnerAssignTask.choosing_manager)
    logger.info(f"–í–ª–∞–¥–µ–ª–µ—Ü ({message.from_user.id}) –æ—Ç–ø—Ä–∞–≤–∏–ª —Å–æ–æ–±—â–µ–Ω–∏–µ, –æ–∂–∏–¥–∞–µ—Ç –≤—ã–±–æ—Ä–∞ –º–µ–Ω–µ–¥–∂–µ—Ä–∞.")

@dp.callback_query(OwnerAssignTask.choosing_manager, F.data.startswith("assign_to_manager:"))
async def owner_assigns_to_manager_callback(callback: CallbackQuery, state: FSMContext):
    manager_num = int(callback.data.split(":")[1])
    target_manager_chat_id = MANAGER_IDS.get(manager_num)
    manager_name = MANAGER_NAMES.get(manager_num, f"–ú–µ–Ω–µ–¥–∂–µ—Ä {manager_num}")

    if not target_manager_chat_id:
        await callback.answer("–û—à–∏–±–∫–∞: –º–µ–Ω–µ–¥–∂–µ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω.", show_alert=True)
        logger.error(f"–û—à–∏–±–∫–∞ –≤—ã–±–æ—Ä–∞ –º–µ–Ω–µ–¥–∂–µ—Ä–∞: –ù–æ–º–µ—Ä {manager_num} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ MANAGER_IDS.")
        await state.clear()
        return

    user_data = await state.get_data()
    await state.clear()

    task_id = generate_task_id()
    tasks_dict[task_id] = {
        "chat_id": target_manager_chat_id, "type": user_data["original_message_content_type"],
        "file_id": user_data["original_message_file_id"], "text": user_data["original_message_text"],
        "caption": user_data["original_message_caption"], "next_reminder_delta": 30,
        "deadline": None, "status": "active", "message_id": None, "source": "owner",
        "manager_num": manager_num
    }
    save_task_to_db(task_id, tasks_dict[task_id])
    msg = await send_task_message(task_id, reminder=False) 
    if msg:
        tasks_dict[task_id]["message_id"] = msg.message_id
        save_task_to_db(task_id, tasks_dict[task_id])
    await schedule_reminder(task_id, 30) 
    
    await callback.message.edit_text(f"‚úÖ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ {manager_name}.")
    await callback.answer()
    logger.info(f"–í–ª–∞–¥–µ–ª–µ—Ü –Ω–∞–∑–Ω–∞—á–∏–ª –∑–∞–¥–∞—á—É {task_id} –º–µ–Ω–µ–¥–∂–µ—Ä—É {manager_name} (‚Ññ{manager_num}, ID: {target_manager_chat_id}).")

@dp.message(Command("rem"), F.chat.id.in_(MANAGER_IDS.values()))
async def manager_reminder_handler(message: Message):
    full_text = message.text.replace('/rem', '', 1).strip()
    time_match = re.search(r'(\d{1,2}:\d{2})$', full_text) 
    date_match = None
    if time_match:
        date_candidate_str = full_text[:time_match.start()].strip()
        date_match_candidate = re.search(r'(\d{1,2}\.\d{1,2})$', date_candidate_str)
        if date_match_candidate:
            date_match = date_match_candidate

    time_str = None
    date_str = None
    desc = ""
    
    if time_match:
        time_str = time_match.group(1)
        temp_text = full_text[:time_match.start()].strip()
        if date_match:
            date_str = date_match.group(1)
            desc = temp_text[:date_match.start()].strip()
        else:
            desc = temp_text
    else:
        return await message.answer("‚ùå –ù–µ —É–∫–∞–∑–∞–Ω–æ –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ HH:MM –≤ –∫–æ–Ω—Ü–µ —Å–æ–æ–±—â–µ–Ω–∏—è.")

    if not desc:
        return await message.answer("‚ùå –û–ø–∏—Å–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º.")

    try:
        now = datetime.now(KIEV_TZ)
        year = now.year
        hours, minutes = map(int, time_str.split(':'))
        if not (0 <= hours <= 23 and 0 <= minutes <= 59):
            raise ValueError("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏")

        if date_str:
            day, month = map(int, date_str.split('.'))
            if not (1 <= month <= 12 and 1 <= day <= 31):
                 raise ValueError("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã (–¥–µ–Ω—å/–º–µ—Å—è—Ü –≤–Ω–µ –¥–∏–∞–ø–∞–∑–æ–Ω–∞)")
            target_time = KIEV_TZ.localize(datetime(year=year, month=month, day=day, hour=hours, minute=minutes))
        else:
            target_time = KIEV_TZ.localize(datetime(year=now.year, month=now.month, day=now.day, hour=hours, minute=minutes))
            if target_time < now:
                target_time += timedelta(days=1)
        
        if target_time < now:
             return await message.answer(f"‚ùå –£–∫–∞–∑–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è —É–∂–µ –ø—Ä–æ—à–ª–æ! ({target_time.strftime('%d.%m.%Y %H:%M')})")

    except ValueError as e:
        logger.warning(f"–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –¥–∞—Ç—ã/–≤—Ä–µ–º–µ–Ω–∏ –¥–ª—è /rem: {e}. –°—Ç—Ä–æ–∫–∞: '{full_text}'")
        return await message.answer(f"‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã –∏–ª–∏ –≤—Ä–µ–º–µ–Ω–∏. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ DD.MM HH:MM –∏–ª–∏ HH:MM. (–û—à–∏–±–∫–∞: {e})")

    task_id = generate_task_id()
    current_manager_num = next((num for num, mid in MANAGER_IDS.items() if mid == message.chat.id), None)
    
    tasks_dict[task_id] = {
        "chat_id": message.chat.id, "type": "text", "file_id": None,
        "text": f"üóìÔ∏è –í–∞—à–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ: {desc}", "caption": "",
        "next_reminder_delta": 30, "deadline": target_time, "status": "active",
        "message_id": None, "source": "manager_rem", "manager_num": current_manager_num
    }
    save_task_to_db(task_id, tasks_dict[task_id])
    manager_name_for_log = MANAGER_NAMES.get(current_manager_num, f"–ú–µ–Ω–µ–¥–∂–µ—Ä {current_manager_num}")
    await message.answer(f"‚úÖ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –Ω–∞ {target_time.strftime('%d.%m.%Y %H:%M %Z')}")
    logger.info(f"–ú–µ–Ω–µ–¥–∂–µ—Ä {manager_name_for_log} (ID: {message.chat.id}, ‚Ññ{current_manager_num}) —Å–æ–∑–¥–∞–ª –∑–∞–¥–∞—á—É {task_id} –Ω–∞ {target_time.strftime('%d.%m.%Y %H:%M')}")

async def _create_scheduled_task_for_manager(manager_chat_id: int, manager_num: int, reminder_text: str, source: str):
    task_id = generate_task_id()
    manager_name = MANAGER_NAMES.get(manager_num, f"–ú–µ–Ω–µ–¥–∂–µ—Ä {manager_num}")
    tasks_dict[task_id] = {
        "chat_id": manager_chat_id, "type": "text", "file_id": None,
        "text": reminder_text, "caption": "", "next_reminder_delta": 30,
        "deadline": None, "status": "active", "message_id": None,
        "source": source, "manager_num": manager_num
    }
    save_task_to_db(task_id, tasks_dict[task_id])
    logger.info(f"–°–æ–∑–¥–∞–Ω–∞ scheduled –∑–∞–¥–∞—á–∞ {task_id} –¥–ª—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞ {manager_name} (‚Ññ{manager_num}, ID: {manager_chat_id}), —Ç–µ–∫—Å—Ç: {reminder_text}")
    msg = await send_task_message(task_id, reminder=False)
    if msg:
        tasks_dict[task_id]["message_id"] = msg.message_id
        save_task_to_db(task_id, tasks_dict[task_id])
    await schedule_reminder(task_id, tasks_dict[task_id]["next_reminder_delta"])

@dp.callback_query(F.data.startswith("done:"))
async def done_task_handler(callback: CallbackQuery):
    task_id = callback.data.split(":")[1]
    task = tasks_dict.get(task_id)

    if not task:
        await callback.answer("–ó–∞–¥–∞—á–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ —É–∂–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞.", show_alert=True)
        logger.warning(f"–ü–æ–ø—ã—Ç–∫–∞ –≤—ã–ø–æ–ª–Ω–∏—Ç—å –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â—É—é/—É–¥–∞–ª–µ–Ω–Ω—É—é –∑–∞–¥–∞—á—É {task_id} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º {callback.from_user.id}")
        try: await callback.message.delete()
        except Exception: pass
        return

    if task["status"] != "active":
        await callback.answer("–ó–∞–¥–∞—á–∞ —É–∂–µ –Ω–µ –∞–∫—Ç–∏–≤–Ω–∞.", show_alert=True)
        logger.info(f"–ó–∞–¥–∞—á–∞ {task_id} —É–∂–µ –Ω–µ –∞–∫—Ç–∏–≤–Ω–∞ (—Å—Ç–∞—Ç—É—Å: {task['status']}), –ø—Ä–æ–∏–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞–Ω–æ.")
        return

    if task.get("message_id"):
        try:
            await bot.delete_message(task["chat_id"], task["message_id"])
            logger.debug(f"–°–æ–æ–±—â–µ–Ω–∏–µ {task['message_id']} –∑–∞–¥–∞—á–∏ {task_id} —É–¥–∞–ª–µ–Ω–æ.")
        except Exception as e:
            logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ {task.get('message_id')} –∑–∞–¥–∞—á–∏ {task_id}: {e}")

    task_status_before_del = task["status"]
    task_source_before_del = task["source"]
    task_manager_num_before_del = task.get("manager_num")

    delete_task_from_db(task_id) 
    if task_id in tasks_dict:
        del tasks_dict[task_id] 

    await callback.answer("–ó–∞–¥–∞—á–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞!")
    
    manager_name_for_log = MANAGER_NAMES.get(task_manager_num_before_del, f"–ú–µ–Ω–µ–¥–∂–µ—Ä {task_manager_num_before_del}") \
        if task_manager_num_before_del is not None else f"ID {callback.from_user.id}"
    logger.info(f"–ó–∞–¥–∞—á–∞ {task_id} –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º {manager_name_for_log}.")

    if task_source_before_del == "owner":
        original_text = task.get("text", "") 
        original_caption = task.get("caption", "")
        
        content_summary = original_text if task.get("type") == "text" else original_caption
        if not content_summary and task.get("type") != "text": content_summary = f"({task.get('type')})"
        elif not content_summary: content_summary = "(–ø—É—Å—Ç–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ)"
        
        if task_manager_num_before_del is not None:
            manager_name_for_prefix = MANAGER_NAMES.get(task_manager_num_before_del, f"–ú–µ–Ω–µ–¥–∂–µ—Ä {task_manager_num_before_del}")
            owner_task_prefix = f"üîî –ó–∞–¥–∞—á–∞ –æ—Ç –í–ª–∞–¥–µ–ª—å—Ü–∞ –¥–ª—è {manager_name_for_prefix} üîî\n"
            if content_summary.startswith(owner_task_prefix):
                content_summary = content_summary.replace(owner_task_prefix, "", 1)
            # –¢–∞–∫–∂–µ —É–¥–∞–ª–∏–º –ø—Ä–µ—Ñ–∏–∫—Å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è, –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å
            reminder_prefix = "‚ÄºÔ∏è –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ ‚ÄºÔ∏è\n"
            if content_summary.startswith(reminder_prefix):
                content_summary = content_summary.replace(reminder_prefix, "", 1).strip()


        max_len = 200
        if len(content_summary) > max_len: content_summary = content_summary[:max_len-3] + "..."
        
        completed_by_manager_name = MANAGER_NAMES.get(task_manager_num_before_del, f"–ú–µ–Ω–µ–¥–∂–µ—Ä {task_manager_num_before_del}") \
            if task_manager_num_before_del is not None else "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä"

        try:
            await bot.send_message(OWNER_ID, f"‚úÖ {completed_by_manager_name} –≤—ã–ø–æ–ª–Ω–∏–ª–∞ –∑–∞–¥–∞—á—É:\n{content_summary}")
            logger.info(f"–£–≤–µ–¥–æ–º–∏–ª–∏ –≤–ª–∞–¥–µ–ª—å—Ü–∞ ({OWNER_ID}) –æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∑–∞–¥–∞—á–∏ {task_id} –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º {completed_by_manager_name}.")
        except Exception as e:
            logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–≤–µ–¥–æ–º–∏—Ç—å –≤–ª–∞–¥–µ–ª—å—Ü–∞ ({OWNER_ID}): {e}")


 # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è
async def send_saturday_morning_reminder():
    manager_num_target = 1
    manager_chat_id = MANAGER_IDS.get(manager_num_target)
    manager_name = MANAGER_NAMES.get(manager_num_target, f"–ú–µ–Ω–µ–¥–∂–µ—Ä {manager_num_target}")
    if manager_chat_id:
        logger.info(f"–ó–∞–ø—É—Å–∫ —Å—É–±–±–æ—Ç–Ω–µ–≥–æ —É—Ç—Ä–µ–Ω–Ω–µ–≥–æ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è (19:00) –¥–ª—è {manager_name}.")
        text = "üìÇ –ù–∞–ø–æ–º–∏–Ω–∞—é —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤—Å–µ –∑–∞–≤–µ—Ä—à—ë–Ω–Ω—ã–µ —Ä–∞–±–æ—Ç—ã –∑–∞ –Ω–µ–¥–µ–ª—é, —á—Ç–æ–±—ã –Ω–∏—á–µ–≥–æ –Ω–µ –ø–æ—Ç–µ—Ä—è–ª–æ—Å—å."
        await _create_scheduled_task_for_manager(manager_chat_id, manager_num_target, text, "saturday_save_work_m1")
    else:
        logger.warning(f"{manager_name} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ MANAGER_IDS –¥–ª—è —Å—É–±–±–æ—Ç–Ω–µ–≥–æ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è.")

async def send_saturday_second_reminder():
    manager_num_target = 1
    manager_chat_id = MANAGER_IDS.get(manager_num_target)
    manager_name = MANAGER_NAMES.get(manager_num_target, f"–ú–µ–Ω–µ–¥–∂–µ—Ä {manager_num_target}")
    if manager_chat_id:
        logger.info(f"–ó–∞–ø—É—Å–∫ —Å—É–±–±–æ—Ç–Ω–µ–≥–æ –≤—Ç–æ—Ä–æ–≥–æ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è (19:30) –¥–ª—è {manager_name}.")
        text = "üìä –î–∞—Ç—å –æ—Ç—á–µ—Ç –ù–∏–∫–∏—Ç–µ –∑–∞ –Ω–µ–¥–µ–ª—é –ø–æ: –¥–∏–∑–∞–π–Ω–µ—Ä–∞–º, –∫–ª–∏–µ–Ω—Ç–∞–º, –∏ –≤ –æ–±—â–µ–º –∫–∞–∫ –∏–¥–µ—Ç –≤—Å–µ. –ö–∞–∫–∏–µ —Ç–æ —Å–≤–æ–∏ –Ω–∞–±–ª—é–¥–µ–Ω–∏—è."
        await _create_scheduled_task_for_manager(manager_chat_id, manager_num_target, text, "saturday_report_m1")
    else:
        logger.warning(f"{manager_name} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ MANAGER_IDS –¥–ª—è —Å—É–±–±–æ—Ç–Ω–µ–≥–æ –æ—Ç—á–µ—Ç–∞.")

async def send_monday_morning_reminder():
    manager_num_target = 1
    manager_chat_id = MANAGER_IDS.get(manager_num_target)
    manager_name = MANAGER_NAMES.get(manager_num_target, f"–ú–µ–Ω–µ–¥–∂–µ—Ä {manager_num_target}")
    if manager_chat_id:
        logger.info(f"–ó–∞–ø—É—Å–∫ –ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏—á–Ω–æ–≥–æ —É—Ç—Ä–µ–Ω–Ω–µ–≥–æ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è (10:00) –¥–ª—è {manager_name}.")
        text = "üöÄ –ó–∞–ø—É—à—å –∫–ª–∏–µ–Ω—Ç–æ–≤, —Å –∫–æ—Ç–æ—Ä—ã–º–∏ –Ω–µ –¥–æ—à–ª–æ –¥–µ–ª–æ –¥–æ –æ–ø–ª–∞—Ç—ã, –∏ –∑–∞–∫—Ä–æ–π –∏—Ö."
        await _create_scheduled_task_for_manager(manager_chat_id, manager_num_target, text, "monday_push_clients_m1")
    else:
        logger.warning(f"{manager_name} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ MANAGER_IDS –¥–ª—è –ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏—á–Ω–æ–≥–æ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è.")

async def check_monthly_dates():
    now = datetime.now(KIEV_TZ)
    day = now.day
    month = now.month
    year = now.year
    logger.info(f"–ï–∂–µ–¥–Ω–µ–≤–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –º–µ—Å—è—á–Ω—ã—Ö –¥–∞—Ç: {day}.{month}.{year}")

    manager_1_id = MANAGER_IDS.get(1)
    manager_1_name = MANAGER_NAMES.get(1, "–ú–µ–Ω–µ–¥–∂–µ—Ä 1")
    if manager_1_id:
        text_msg_m1 = None
        if day == 15:
            text_msg_m1 = ("üîî –ü—Ä–æ–≤–µ—Ä—å, —É –∫–æ–≥–æ –∏–∑ –∫–ª–∏–µ–Ω—Ç–æ–≤ –µ—â—ë –Ω–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –æ–ø–ª–∞—Ç–∞, –∏ –Ω–∞–ø–æ–º–Ω–∏ –∏–º –æ–± —ç—Ç–æ–º. "
                        "–¢–∞–∫–∂–µ –ø–æ—Å—á–∏—Ç–∞–π –≤—ã–ø–ª–∞—Ç—ã –¥–ª—è –¥–∏–∑–∞–π–Ω–µ—Ä–æ–≤ –∑–∞ 1-15 —á–∏—Å–ª–∞.")
        else:
            is_last_day_m1 = False
            if month == 2:
                is_leap = (year % 4 == 0 and year % 100 != 0) or (year % 400 == 0)
                if (is_leap and day == 29) or (not is_leap and day == 28): is_last_day_m1 = True
            elif month in [4, 6, 9, 11]: 
                if day == 30: is_last_day_m1 = True
            else: 
                if day == 31: is_last_day_m1 = True
            if is_last_day_m1:
                text_msg_m1 = (f"üîî –ü—Ä–æ–≤–µ—Ä—å, —É –∫–æ–≥–æ –∏–∑ –∫–ª–∏–µ–Ω—Ç–æ–≤ –µ—â—ë –Ω–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –æ–ø–ª–∞—Ç–∞, –∏ –Ω–∞–ø–æ–º–Ω–∏ –∏–º –æ–± —ç—Ç–æ–º. "
                            f"–¢–∞–∫–∂–µ –ø–æ—Å—á–∏—Ç–∞–π –≤—ã–ø–ª–∞—Ç—ã –¥–ª—è –¥–∏–∑–∞–π–Ω–µ—Ä–æ–≤ –∑–∞ 16-{day} —á–∏—Å–ª–∞.")
        if text_msg_m1:
            logger.info(f"–°–æ–∑–¥–∞–Ω–∏–µ –µ–∂–µ–º–µ—Å—è—á–Ω–æ–π –∑–∞–¥–∞—á–∏ –¥–ª—è {manager_1_name}: {text_msg_m1}")
            await _create_scheduled_task_for_manager(manager_1_id, 1, text_msg_m1, "monthly_billing_m1")
    else:
        logger.warning(f"{manager_1_name} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ MANAGER_IDS –¥–ª—è –µ–∂–µ–º–µ—Å—è—á–Ω—ã—Ö –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π.")

    managers_2_3_data = {}
    if 2 in MANAGER_IDS and 2 in MANAGER_NAMES: managers_2_3_data[2] = {"id": MANAGER_IDS[2], "name": MANAGER_NAMES[2]}
    if 3 in MANAGER_IDS and 3 in MANAGER_NAMES: managers_2_3_data[3] = {"id": MANAGER_IDS[3], "name": MANAGER_NAMES[3]}
    
    if not managers_2_3_data:
        logger.info("–ú–µ–Ω–µ–¥–∂–µ—Ä—ã 2 –∏ 3 (–∏–ª–∏ –∏—Ö –∏–º–µ–Ω–∞) –Ω–µ –Ω–∞–π–¥–µ–Ω—ã, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –∏—Ö –µ–∂–µ–º–µ—Å—è—á–Ω—ã–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è.")
    else:
        text_msg_m23 = None
        source_m23 = "monthly_m23"
        if day == 1:
            text_msg_m23 = "1Ô∏è‚É£ —á–∏—Å–ª–æ: –ó–∞–ø—É—à–∏—Ç—å –∫–ª–∏–µ–Ω—Ç–æ–≤ –Ω–∞ –æ–ø–ª–∞—Ç—ã –∏ –≤—ã—Å—Ç–∞–≤–∏—Ç—å —Å—á–µ—Ç –Ω–∞ –æ–ø–ª–∞—Ç—É."
            source_m23 += "_d1"
        elif day == 5:
            text_msg_m23 = "5Ô∏è‚É£ —á–∏—Å–ª–æ: –ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –æ–ø–ª–∞—Ç—ã –∏ –∑–∞–ø—É—à–∏—Ç—å —Ç–µ—Ö, –∫—Ç–æ –Ω–µ –æ–ø–ª–∞—Ç–∏–ª."
            source_m23 += "_d5"
        elif day == 15:
            text_msg_m23 = "1Ô∏è‚É£5Ô∏è‚É£ —á–∏—Å–ª–æ: –ó–∞–ø—É—à–∏—Ç—å –∫–ª–∏–µ–Ω—Ç–æ–≤ –Ω–∞ –æ–ø–ª–∞—Ç—É 50%."
            source_m23 += "_d15"
        elif day == 20:
            text_msg_m23 = "2Ô∏è‚É£0Ô∏è‚É£ —á–∏—Å–ª–æ: –ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –æ–ø–ª–∞—Ç—ã –∏ –∑–∞–ø—É—à–∏—Ç—å —Ç–µ—Ö, –∫—Ç–æ –Ω–µ –æ–ø–ª–∞—Ç–∏–ª (–ø–æ 50%)."
            source_m23 += "_d20"
        else:
            is_last_day_m23 = False
            if month == 2:
                is_leap = (year % 4 == 0 and year % 100 != 0) or (year % 400 == 0)
                if (is_leap and day == 29) or (not is_leap and day == 28): is_last_day_m23 = True
            elif day == 30: is_last_day_m23 = True
            if is_last_day_m23:
                text_msg_m23 = ("‚ÄºÔ∏è –ó–∞–ø—É—à–∏—Ç—å —Å–≤–æ–∏—Ö –¥–∏–∑–∞–π–Ω–µ—Ä–æ–≤, —á—Ç–æ–±—ã –≤–ø–∏—Å–∞–ª–∏ –≤—Å–µ –∫—Ä–µ–∞—Ç–∏–≤—ã "
                               "–≤ –Ω—É–∂–Ω—ã–µ —Ç–∞–±–ª–∏—Ü—ã –∏ –ø—Ä–æ–µ–∫—Ç—ã —É–∂–µ —Å–µ–≥–æ–¥–Ω—è, —Ç.–∫. –∑–∞–≤—Ç—Ä–∞ –ø–æ–¥–±–∏–≤–∞–µ–º –≤—Å–µ –∏—Ç–æ–≥–∏ –º–µ—Å—è—Ü–∞.")
                source_m23 += "_lastday"
        if text_msg_m23:
            for num, data in managers_2_3_data.items():
                logger.info(f"–°–æ–∑–¥–∞–Ω–∏–µ –µ–∂–µ–º–µ—Å—è—á–Ω–æ–π –∑–∞–¥–∞—á–∏ –¥–ª—è {data['name']}: {text_msg_m23}")
                await _create_scheduled_task_for_manager(data['id'], num, text_msg_m23, source_m23)

 # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞ –∑–∞–¥–∞—á
def setup_scheduler():
    scheduler.add_job(send_monday_morning_reminder, CronTrigger(day_of_week="mon", hour=10, minute=0, timezone=KIEV_TZ))
    scheduler.add_job(send_saturday_morning_reminder, CronTrigger(day_of_week="sat", hour=19, minute=0, timezone=KIEV_TZ))
    scheduler.add_job(send_saturday_second_reminder, CronTrigger(day_of_week="sat", hour=19, minute=30, timezone=KIEV_TZ))
    scheduler.add_job(check_tasks, 'interval', seconds=30, timezone=KIEV_TZ, id="check_tasks_job")
    scheduler.add_job(check_monthly_dates, CronTrigger(hour=10, minute=1, timezone=KIEV_TZ))
    logger.info("–ó–∞–¥–∞—á–∏ APScheduler –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã.")

 # –°—Ç–∞—Ä—Ç –±–æ—Ç–∞
async def on_startup():
    logger.info("–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞...")
    global tasks_dict
    init_db()
    loaded_tasks = load_tasks_from_db()
    tasks_dict.update(loaded_tasks)
    logger.info(f"–ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(tasks_dict)} –∑–∞–¥–∞—á –∏–∑ –ë–î.")

    now = datetime.now(KIEV_TZ)
    active_tasks_to_reschedule_count = 0
    for task_id, task_data in list(tasks_dict.items()):
        if task_data["status"] == "active":
            active_tasks_to_reschedule_count +=1
            if not task_data.get("deadline") or task_data["deadline"] < now:
                logger.info(f"–ó–∞–¥–∞—á–∞ {task_id} –∞–∫—Ç–∏–≤–Ω–∞ –∏ —Ç—Ä–µ–±—É–µ—Ç –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ–≥–æ –≤–Ω–∏–º–∞–Ω–∏—è.")
                await schedule_reminder(task_id, 0)
        elif task_data["status"] == "error_user_blocked":
            logger.warning(f"–ó–∞–¥–∞—á–∞ {task_id} –∏–º–µ–µ—Ç —Å—Ç–∞—Ç—É—Å 'error_user_blocked'. –ù–µ –∞–∫—Ç–∏–≤–∏—Ä—É–µ—Ç—Å—è.")
    logger.info(f"{active_tasks_to_reschedule_count} –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–¥–∞—á –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ.")

    setup_scheduler()
    scheduler.start()
    logger.info("APScheduler –∑–∞–ø—É—â–µ–Ω.")
    try:
        manager_names_str = ", ".join(MANAGER_NAMES.values()) if MANAGER_NAMES else "–º–µ–Ω–µ–¥–∂–µ—Ä—ã –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã"
        await bot.send_message(OWNER_ID, f"–ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω! –ê–∫—Ç–∏–≤–Ω—ã –º–µ–Ω–µ–¥–∂–µ—Ä—ã: {manager_names_str}.")
    except Exception as e:
        logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –∑–∞–ø—É—Å–∫–µ –≤–ª–∞–¥–µ–ª—å—Ü—É: {e}")

async def main():
    dp.startup.register(on_startup)
    await dp.start_polling(bot)

if __name__ == "__main__":
    if API_TOKEN == "YOUR_API_TOKEN" or OWNER_ID == 000000000:
        logger.critical("!!! –ù–ï–û–ë–•–û–î–ò–ú–û –ó–ê–ú–ï–ù–ò–¢–¨ API_TOKEN –∏ OWNER_ID –≤ –∫–æ–¥–µ !!!")
        exit(1)
    
    
    if set(MANAGER_IDS.keys()) != set(MANAGER_NAMES.keys()):
        logger.critical(f"!!! –ö–ª—é—á–∏ –≤ MANAGER_IDS ({set(MANAGER_IDS.keys())}) –∏ MANAGER_NAMES ({set(MANAGER_NAMES.keys())}) –¥–æ–ª–∂–Ω—ã —Å–æ–≤–ø–∞–¥–∞—Ç—å!!!")
        exit(1)
    
    if any(not isinstance(val, int) for val in MANAGER_IDS.values()):
        logger.critical(f"!!! ID –ú–µ–Ω–µ–¥–∂–µ—Ä–æ–≤ –≤ MANAGER_IDS –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–º–∏ —Ü–µ–ª—ã–º–∏ —á–∏—Å–ª–∞–º–∏. –¢–µ–∫—É—â–∏–µ: {MANAGER_IDS} !!!")
        exit(1)
    
    if any(not isinstance(val, str) or not val for val in MANAGER_NAMES.values()):
        logger.critical(f"!!! –ò–º–µ–Ω–∞ –ú–µ–Ω–µ–¥–∂–µ—Ä–æ–≤ –≤ MANAGER_NAMES –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –Ω–µ–ø—É—Å—Ç—ã–º–∏ —Å—Ç—Ä–æ–∫–∞–º–∏. –¢–µ–∫—É—â–∏–µ: {MANAGER_NAMES} !!!")
        exit(1)

    asyncio.run(main())
